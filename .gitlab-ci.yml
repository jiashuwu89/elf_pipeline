

variables:
  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # Update this variable whenever a new development image is compiled.
  DEV_IMAGE: git.elfin.ucla:5050/science-processing/pipeline-refactor/dev-image:fef5d134

# Use a custom docker image that contains our development environment
# (CDF, gFortran, and Poetry). See docker/ for more details.
image: ${DEV_IMAGE}

cache:
  paths:
    - .cache/pip
    - .venv

stages:
  - Static Analysis
  - Deploy

before_script:
  - python -V  # Print out python version for debugging
  - poetry install

check-format:
  stage: Static Analysis
  script:
  - make check-format

flake8:
  stage: Static Analysis
  script:
  - make flake8
  allow_failure: true

pylint:
  stage: Static Analysis
  script:
  - make pylint
  allow_failure: true

check-types:
  stage: Static Analysis
  script:
  - make check-types

test:
  stage: Static Analysis
  script:
  - make coverage
  artifacts:
    paths:
      - htmlcov/
  coverage: '/TOTAL.* ([0-9.]{4,6})%/'

pages:
  stage: Deploy
  dependencies:
    - test
  script:
    - make doc  # Sphinx autodoc
    - mv doc/build/html/ public/
    - mv htmlcov/ public/  # Coverage report
  artifacts:
    paths:
      - public
  only:
    - master

deploy-vm:
  stage: Deploy
  environment:
    name: Production
    url: sciproc.elfin.ucla
  tags:
    - shell
    - sciproc
  before_script:
    - echo "Deploying!"
  script:
    - cd /home/elfin/pipeline-refactor
    - git fetch
    - git checkout $CI_COMMIT_SHA
    - poetry install
  only:
    - master
  when: manual
